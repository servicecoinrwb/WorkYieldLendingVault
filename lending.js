// --- CONFIGURATION ---
const LENDING_VAULT_ADDRESS = '0xCcDc74D8D4a3a54e3bB65FBcE6733f4c2317e340';
const PUSD_ADDRESS = '0xdddD73F5Df1F0DC31373357beAC77545dC5A6f3F';
const WYT_ADDRESS = '0xccF4eaa301058Ec5561a07Cc38A75F47a2912EA5';

const PLUME_MAINNET = {
    chainId: '0x18232',
    chainName: 'Plume',
    nativeCurrency: { name: 'PLUME', symbol: 'PLUME', decimals: 18 },
    rpcUrls: ['https://rpc.plume.org'],
    blockExplorerUrls: ['https://explorer.plume.org'],
};

// --- ABIs ---
const LENDING_VAULT_ABI = [{"inputs":[{"internalType":"address","name":"_wytAddress","type":"address"},{"internalType":"address","name":"_pUSDAddress","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Borrowed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"CollateralDeposited","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"CollateralWithdrawn","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"interestPaid","type":"uint256"}],"name":"Repaid","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"funder","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"VaultFunded","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"LIQUIDATOR_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"borrow","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"collateral","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"depositCollateral","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_pUSDAmount","type":"uint256"}],"name":"fundVault","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"getCollateralValue","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"getDebtWithInterest","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"interestRate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_collateralAmount","type":"uint256"},{"internalType":"uint256","name":"_debtAmount","type":"uint256"}],"name":"isHealthy","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"loanToValueRatio","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"loans","outputs":[{"internalType":"uint256","name":"principal","type":"uint256"},{"internalType":"uint256","name":"lastUpdateTime","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pUSD","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"repay","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_rate","type":"uint256"}],"name":"setInterestRate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_ltv","type":"uint256"}],"name":"setLoanToValueRatio","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"withdrawCollateral","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"wyt","outputs":[{"internalType":"contract IWorkYieldToken","name":"","type":"address"}],"stateMutability":"view","type":"function"}];
const ERC20_ABI = [ "function balanceOf(address account) view returns (uint256)", "function approve(address spender, uint256 amount) returns (bool)", "function allowance(address owner, address spender) view returns (uint256)", "function decimals() view returns (uint8)" ];

const LendingApp = {
    provider: null, signer: null, vaultContract: null, pusdContract: null, wytContract: null, userAddress: null, elements: {},

    init() { this.cacheDOMElements(); this.addEventListeners(); this.checkExistingConnection(); },
    cacheDOMElements() {
        this.elements = {
            connectButton: document.getElementById('connectButton'), balanceInfo: document.getElementById('balanceInfo'), lendingActions: document.getElementById('lendingActions'),
            pUSDBalanceDisplay: document.getElementById('pUSDBalanceDisplay'), wytBalanceDisplay: document.getElementById('wytBalanceDisplay'), collateralBalanceDisplay: document.getElementById('collateralBalanceDisplay'),
            loanBalanceDisplay: document.getElementById('loanBalanceDisplay'), depositTab: document.getElementById('depositTab'), borrowTab: document.getElementById('borrowTab'),
            depositPanel: document.getElementById('depositPanel'), borrowPanel: document.getElementById('borrowPanel'), collateralAmountInput: document.getElementById('collateralAmount'),
            loanAmountInput: document.getElementById('loanAmount'), depositButton: document.getElementById('depositButton'), withdrawButton: document.getElementById('withdrawButton'),
            borrowButton: document.getElementById('borrowButton'), repayButton: document.getElementById('repayButton'), adminPanel: document.getElementById('adminPanel'),
            fundAmountInput: document.getElementById('fundAmount'), fundVaultButton: document.getElementById('fundVaultButton'),
        };
    },
    addEventListeners() {
        this.elements.connectButton?.addEventListener('click', () => this.connectWallet());
        this.elements.depositTab?.addEventListener('click', () => this.switchTab('deposit'));
        this.elements.borrowTab?.addEventListener('click', () => this.switchTab('borrow'));
        this.elements.depositButton?.addEventListener('click', (e) => this.depositCollateral(e));
        this.elements.withdrawButton?.addEventListener('click', (e) => this.withdrawCollateral(e));
        this.elements.borrowButton?.addEventListener('click', (e) => this.borrow(e));
        this.elements.repayButton?.addEventListener('click', (e) => this.repay(e));
        this.elements.fundVaultButton?.addEventListener('click', (e) => this.fundVault(e));
        if (window.ethereum) { window.ethereum.on('accountsChanged', () => this.connectWallet()); window.ethereum.on('chainChanged', () => window.location.reload()); }
    },
    switchTab(tab) { const isDeposit = tab === 'deposit'; this.elements.depositTab?.classList.toggle('active', isDeposit); this.elements.borrowTab?.classList.toggle('active', !isDeposit); this.elements.depositPanel?.classList.toggle('hidden', !isDeposit); this.elements.borrowPanel?.classList.toggle('hidden', isDeposit); },
    async checkExistingConnection() { if (window.ethereum) { try { const accounts = await window.ethereum.request({ method: 'eth_accounts' }); if (accounts.length > 0) await this.connectWallet(); } catch (error) { console.log('No existing connection'); } } },
    async connectWallet() { 
        if (!window.ethereum) return this.showNotification('Please install a Web3 wallet.', 'error'); 
        try { 
            await window.ethereum.request({ method: 'wallet_switchEthereumChain', params: [{ chainId: PLUME_MAINNET.chainId }] }).catch(async (err) => { if (err.code === 4902) { await window.ethereum.request({ method: 'wallet_addEthereumChain', params: [PLUME_MAINNET] }); } }); 
            const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' }); 
            
            // --- THIS IS THE FIX ---
            // Explicitly tell Ethers.js about the Plume network to prevent ENS errors.
            this.provider = new ethers.providers.Web3Provider(window.ethereum, {
                name: PLUME_MAINNET.chainName,
                chainId: parseInt(PLUME_MAINNET.chainId, 16)
            });
            // --- END OF FIX ---

            this.signer = this.provider.getSigner(); 
            this.userAddress = await this.signer.getAddress(); 
            this.vaultContract = new ethers.Contract(LENDING_VAULT_ADDRESS, LENDING_VAULT_ABI, this.signer); 
            this.pusdContract = new ethers.Contract(PUSD_ADDRESS, ERC20_ABI, this.signer); 
            this.wytContract = new ethers.Contract(WYT_ADDRESS, ERC20_ABI, this.signer); 
            const shortAddress = `${this.userAddress.slice(0, 6)}...${this.userAddress.slice(-4)}`; 
            this.elements.connectButton.textContent = `Connected: ${shortAddress}`; 
            this.elements.connectButton.disabled = true; 
            this.elements.balanceInfo.classList.remove('hidden'); 
            this.elements.lendingActions.classList.remove('hidden'); 
            const isAdmin = await this.vaultContract.hasRole(await this.vaultContract.DEFAULT_ADMIN_ROLE(), this.userAddress); 
            if (isAdmin) { this.elements.adminPanel.classList.remove('hidden'); } 
            this.showNotification('Wallet connected!', 'success'); 
            await this.updateBalances(); 
        } catch (err) { 
            this.showNotification(err.message || 'Connection failed.', 'error'); 
        } 
    },
    async updateBalances() { try { const [userPusd, userWyt, userCollateral, userLoan, pusdDec, wytDec] = await Promise.all([ this.pusdContract.balanceOf(this.userAddress), this.wytContract.balanceOf(this.userAddress), this.vaultContract.collateral(this.userAddress), this.vaultContract.getDebtWithInterest(this.userAddress), this.pusdContract.decimals(), this.wytContract.decimals(), ]); this.elements.pUSDBalanceDisplay.innerText = this.formatTokenValue(userPusd, pusdDec); this.elements.wytBalanceDisplay.innerText = this.formatTokenValue(userWyt, wytDec); this.elements.collateralBalanceDisplay.innerText = this.formatTokenValue(userCollateral, wytDec); this.elements.loanBalanceDisplay.innerText = this.formatTokenValue(userLoan, pusdDec); } catch (err) { console.error("Failed to update balances:", err); this.showNotification("Could not load balance data.", "error"); } },
    async depositCollateral(event) { const amount = this.elements.collateralAmountInput.value; if (!amount || parseFloat(amount) <= 0) return this.showNotification("Please enter a valid amount.", "error"); await this.handleTransaction(event, async () => { const wytDecimals = await this.wytContract.decimals(); const parsedAmount = ethers.utils.parseUnits(amount, wytDecimals); this.showNotification("Approving WYT spend...", "info"); const approveTx = await this.wytContract.approve(LENDING_VAULT_ADDRESS, parsedAmount); await approveTx.wait(); this.showNotification("Approval successful! Depositing collateral...", "info"); const depositTx = await this.vaultContract.depositCollateral(parsedAmount); await depositTx.wait(); this.elements.collateralAmountInput.value = ''; return "Collateral deposited successfully!"; }); },
    async withdrawCollateral(event) { const amount = this.elements.collateralAmountInput.value; if (!amount || parseFloat(amount) <= 0) return this.showNotification("Please enter a valid amount.", "error"); await this.handleTransaction(event, async () => { const wytDecimals = await this.wytContract.decimals(); const parsedAmount = ethers.utils.parseUnits(amount, wytDecimals); this.showNotification("Withdrawing collateral...", "info"); const withdrawTx = await this.vaultContract.withdrawCollateral(parsedAmount); await withdrawTx.wait(); this.elements.collateralAmountInput.value = ''; return "Collateral withdrawn successfully!"; }); },
    async borrow(event) { const amount = this.elements.loanAmountInput.value; if (!amount || parseFloat(amount) <= 0) return this.showNotification("Please enter a valid amount.", "error"); await this.handleTransaction(event, async () => { const pusdDecimals = await this.pusdContract.decimals(); const parsedAmount = ethers.utils.parseUnits(amount, pusdDecimals); this.showNotification("Borrowing pUSD...", "info"); const borrowTx = await this.vaultContract.borrow(parsedAmount); await borrowTx.wait(); this.elements.loanAmountInput.value = ''; return "Borrow successful!"; }); },
    async repay(event) { const amount = this.elements.loanAmountInput.value; if (!amount || parseFloat(amount) <= 0) return this.showNotification("Please enter a valid amount.", "error"); await this.handleTransaction(event, async () => { const pusdDecimals = await this.pusdContract.decimals(); const parsedAmount = ethers.utils.parseUnits(amount, pusdDecimals); this.showNotification("Approving pUSD spend...", "info"); const approveTx = await this.pusdContract.approve(LENDING_VAULT_ADDRESS, parsedAmount); await approveTx.wait(); this.showNotification("Approval successful! Repaying loan...", "info"); const repayTx = await this.vaultContract.repay(parsedAmount); await repayTx.wait(); this.elements.loanAmountInput.value = ''; return "Repayment successful!"; }); },
    async fundVault(event) { const amount = this.elements.fundAmountInput.value; if (!amount || parseFloat(amount) <= 0) return this.showNotification("Please enter a valid amount.", "error"); await this.handleTransaction(event, async () => { const pusdDecimals = await this.pusdContract.decimals(); const parsedAmount = ethers.utils.parseUnits(amount, pusdDecimals); this.showNotification("Approving pUSD spend...", "info"); const approveTx = await this.pusdContract.approve(LENDING_VAULT_ADDRESS, parsedAmount); await approveTx.wait(); this.showNotification("Approval successful! Funding vault...", "info"); const fundTx = await this.vaultContract.fundVault(parsedAmount); await fundTx.wait(); this.elements.fundAmountInput.value = ''; return "Vault funded successfully!"; }); },

    async handleTransaction(event, transactionCallback) { const button = event.target; this.setButtonLoading(button, true); try { const successMessage = await transactionCallback(); this.showNotification(successMessage, 'success'); await this.updateBalances(); } catch (error) { let errorMessage = 'Transaction failed.'; if (error.code === 4001) errorMessage = 'Transaction rejected by user.'; else if (error.data?.message) errorMessage = error.data.message; else if (error.message) errorMessage = error.message; this.showNotification(errorMessage, 'error'); } finally { this.setButtonLoading(button, false); } },
    setButtonLoading(button, isLoading) { if (!button) return; if (isLoading) { button.disabled = true; button.dataset.originalText = button.textContent; button.innerHTML = '<span class="spinner"></span> Processing...'; } else { button.disabled = false; button.textContent = button.dataset.originalText || 'Submit'; } },
    showNotification(message, type = 'info') { const notification = document.createElement('div'); notification.className = `notification notification-${type}`; notification.textContent = message; document.body.appendChild(notification); setTimeout(() => { if (notification.parentNode) notification.parentNode.removeChild(notification); }, 5000); console.log(`[${type.toUpperCase()}] ${message}`); },
    formatTokenValue(value, decimals) { try { const formatted = ethers.utils.formatUnits(value, decimals); const number = parseFloat(formatted); return number.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 4 }); } catch (error) { return '0.00'; } }
};

window.addEventListener('load', () => LendingApp.init());
